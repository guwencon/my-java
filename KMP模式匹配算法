public class well {
 public static void main(String[] args)
 {
	char[] a= {'a','c','a','c','a','c'};
	char[] b= {'b','b','a','c','a','c','a','c'};
	System.out.println(compare(b,a));
	System.out.println(Arrays.toString(ttt(a)));
 }
 
 public static int[] ttt(char[] a)//用于判断当第i各字符不一样时第几个字符跳到第i位
 {
	 int[] next=new int[a.length];
	 next[0]=a.length;
	 int i=2,j=1;//一般是next[i]=j,的形式，即当第i个字符与母串不同时，第j个字符跳到第i个位
	 next[1]=0;
	 next[2]=1;
	 while(i<a.length-1)
	 {
		 if(a[i]==a[j])
		 {
			++i;
			++j;
			if(a[i]!=a[j])/如果a[i]和a[j]相同，将a[j]换到a[i]没有意义，因为还是和母串不同
			next[i]=j;/*当第i个和第j个相同时（如果j>1,说明第j个以前的j-1个字符与第i个以前的j-1个字符一样），
			           如果i的下一个字符与母串不匹配，就将第j+1个字符跳到第i+1位
			          */
			else
				next[i]=next[j]; 
		 }
		 else
		 {
			 j=1;
			 next[++i]=1;//如果第i个和第j个不相同，j就跳回第一个，当第i个的下一个与母串不同时，i的下一个就跳到第一个                          
		 }
	 }
	 return next;
 }
 
 public static int compare(char[] da,char[] xiao)//反回字符串xiao,在字符串da中的位置，两个字符串的第零个位置存的是大小，不参与比较
 {
	 int i=1,j=1;                                //i是da的下标，j是xiao的下标
	 int[] next=ttt(xiao);
	 while(i<=da.length-1)
	 {
		 if(da[i]==xiao[j])
		 {
			 i++;
			 j++;
		 }
		 else if(j==1)
			 i++;
		 else
		 {
			 j=next[j];
		 }
		 if(j==xiao.length)
			 return i-j+1;
			 
	 }
	 return -1;
	 
 }
}

/*
输出为3
[6, 0, 1, 1, 2, 3]
*/

